{"version":3,"sources":["assets/logo/解析-logos_white.png","components/AnalyzeForm/AnalyzeForm.tsx","components/Results/Results.tsx","components/HomePage/HomePage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AnalyzeForm","onTotalsResponse","onJReadabilityResponse","textElement","useRef","className","name","placeholder","ref","type","onClick","text","current","value","totalsResponse","fetch","method","body","JSON","stringify","headers","mode","jreadabilityResponse","then","response","json","aria-hidden","Results","words","characters","morea","readability","toLocaleString","navigation","HomePage","useState","totals","setTotals","jReadability","setJReadability","as","open","src","logo","alt","map","item","itemIdx","href","Button","Panel","totalMorphemeCount","totalCharacterCount","totalMoraCount","readabilityScore","document","addEventListener","event","clipboardData","setData","preventDefault","execCommand","copyToClipboard","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9fbc1b2e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/解析-logos_white.0cf5f326.png\";","import { useRef } from \"react\";\nimport { CheckIcon } from \"@heroicons/react/solid\";\n\nexport default function AnalyzeForm({\n  onTotalsResponse,\n  onJReadabilityResponse,\n}: {\n  onTotalsResponse: (response?: {\n    totalCharacterCount?: Number;\n    totalMorphemeCount?: Number;\n    totalMoraCount?: Number;\n  }) => void;\n  onJReadabilityResponse: (resposne?: { readabilityScore?: Number }) => void;\n}) {\n  const textElement = useRef<HTMLTextAreaElement>(null);\n\n  const analyzeText = () => {\n    onTotalsResponse();\n    onJReadabilityResponse();\n\n    const text = textElement.current?.value;\n\n    const totalsResponse = fetch(\n      \"https://kaiseki-service.herokuapp.com/totals\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({ text }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        mode: \"cors\",\n      }\n    );\n\n    const jreadabilityResponse = fetch(\n      \"https://kaiseki-service.herokuapp.com/jreadability-score\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({ text }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        mode: \"cors\",\n      }\n    );\n\n    totalsResponse.then((response) => response.json()).then(onTotalsResponse);\n    jreadabilityResponse\n      .then((response) => response.json())\n      .then(onJReadabilityResponse);\n  };\n\n  return (\n    <div className=\"h-full\">\n      <textarea\n        name=\"text\"\n        className=\"mt-1 relative rounded-md shadow-sm h-3/4 border-4 border-dashed border-gray-200 rounded-lg focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2 sm:text-sm border-gray-300 rounded-md\"\n        placeholder=\"Text to analyze\"\n        ref={textElement}\n      />\n      <div className=\"my-4 h-1/4\">\n        <button\n          type=\"button\"\n          className=\"inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n          onClick={analyzeText}\n        >\n          <CheckIcon className=\"-ml-1 mr-2 h-5 w-5\" aria-hidden=\"true\" />\n          Analayze\n        </button>\n      </div>\n    </div>\n  );\n}\n","export default function Results({\n  words,\n  characters,\n  morea,\n  readability,\n}: {\n  words?: Number | \"-\";\n  characters?: Number | \"-\";\n  morea?: Number | \"-\";\n  readability?: Number | \"-\";\n}) {\n  return (\n    <section className=\"text-gray-400 bg-gray-900 body-font\">\n      <div className=\"container px-2 py-4 mx-auto\">\n        <div className=\"flex flex-wrap -m-4 text-center\">\n          <div className=\"p-4 sm:w-1/4 w-1/2\">\n            <h2 className=\"title-font font-medium sm:text-4xl text-3xl text-white\">\n              {characters?.toLocaleString()}\n            </h2>\n            <p className=\"leading-relaxed\">Characters</p>\n          </div>\n          <div className=\"p-4 sm:w-1/4 w-1/2\">\n            <h2 className=\"title-font font-medium sm:text-4xl text-3xl text-white\">\n              {words?.toLocaleString()}\n            </h2>\n            <p className=\"leading-relaxed\">Words</p>\n          </div>\n          <div className=\"p-4 sm:w-1/4 w-1/2\">\n            <h2 className=\"title-font font-medium sm:text-4xl text-3xl text-white\">\n              {morea?.toLocaleString()}\n            </h2>\n            <p className=\"leading-relaxed\">Morae</p>\n          </div>\n          <div className=\"p-4 sm:w-1/4 w-1/2\">\n            <h2 className=\"title-font font-medium sm:text-4xl text-3xl text-white\">\n              {readability}\n            </h2>\n            <p className=\"leading-relaxed\">Readability</p>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","import { Fragment, useState } from \"react\";\nimport { Disclosure, Menu, Transition } from \"@headlessui/react\";\nimport { BellIcon, MenuIcon, XIcon } from \"@heroicons/react/outline\";\nimport logo from \"../../assets/logo/解析-logos_white.png\";\nimport AnalyzeForm from \"../AnalyzeForm/AnalyzeForm\";\nimport Results from \"../Results/Results\";\n\nconst navigation = [\"Analyze\"];\n// const profile = [\"Your Profile\", \"Settings\", \"Sign out\"];\n\nfunction classNames(...classes: (string | boolean)[]) {\n  return classes.filter(Boolean).join(\" \");\n}\n\nconst copyToClipboard = ({ text }: { text: string }) => {\n  document.addEventListener(\"copy\", (event) => {\n    event.clipboardData?.setData(\"text/plain\", text);\n    event.preventDefault();\n  });\n\n  document.execCommand(\"copy\");\n};\n\nexport default function HomePage() {\n  const [totals, setTotals] = useState<{\n    totalCharacterCount?: Number;\n    totalMorphemeCount?: Number;\n    totalMoraCount?: Number;\n  }>();\n  const [jReadability, setJReadability] = useState<{\n    readabilityScore?: Number;\n  }>();\n\n  return (\n    <div className=\"h-screen\">\n      <Disclosure as=\"nav\" className=\"bg-gray-800 hidden\">\n        {({ open }) => (\n          <>\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n              <div className=\"flex items-center justify-between h-16\">\n                <div className=\"flex items-center\">\n                  <div className=\"flex-shrink-0\">\n                    <img className=\"h-8 w-8\" src={logo} alt=\"Workflow\" />\n                  </div>\n                  <div className=\"hidden md:block\">\n                    <div className=\"ml-10 flex items-baseline space-x-4\">\n                      {navigation.map((item, itemIdx) =>\n                        itemIdx === 0 ? (\n                          <Fragment key={item}>\n                            {/* Current: \"bg-gray-900 text-white\", Default: \"text-gray-300 hover:bg-gray-700 hover:text-white\" */}\n                            <a\n                              href=\"#\"\n                              className=\"bg-gray-900 text-white px-3 py-2 rounded-md text-sm font-medium\"\n                            >\n                              {item}\n                            </a>\n                          </Fragment>\n                        ) : (\n                          <a\n                            key={item}\n                            href=\"#\"\n                            className=\"text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium\"\n                          >\n                            {item}\n                          </a>\n                        )\n                      )}\n                    </div>\n                  </div>\n                </div>\n                {/* <div className=\"hidden md:block\">\n                  <div className=\"ml-4 flex items-center md:ml-6\">\n                    <button className=\"bg-gray-800 p-1 rounded-full text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white\">\n                      <span className=\"sr-only\">View notifications</span>\n                      <BellIcon className=\"h-6 w-6\" aria-hidden=\"true\" />\n                    </button>\n\n                    Profile dropdown\n                    <Menu as=\"div\" className=\"ml-3 relative\">\n                      {({ open }) => (\n                        <>\n                          <div>\n                            <Menu.Button className=\"max-w-xs bg-gray-800 rounded-full flex items-center text-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white\">\n                              <span className=\"sr-only\">Open user menu</span>\n                              <img\n                                className=\"h-8 w-8 rounded-full\"\n                                src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\"\n                                alt=\"\"\n                              />\n                            </Menu.Button>\n                          </div>\n                          <Transition\n                            show={open}\n                            as={Fragment}\n                            enter=\"transition ease-out duration-100\"\n                            enterFrom=\"transform opacity-0 scale-95\"\n                            enterTo=\"transform opacity-100 scale-100\"\n                            leave=\"transition ease-in duration-75\"\n                            leaveFrom=\"transform opacity-100 scale-100\"\n                            leaveTo=\"transform opacity-0 scale-95\"\n                          >\n                            <Menu.Items\n                              static\n                              className=\"origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none\"\n                            >\n                              {profile.map((item) => (\n                                <Menu.Item key={item}>\n                                  {({ active }) => (\n                                    <a\n                                      href=\"#\"\n                                      className={classNames(\n                                        active ? \"bg-gray-100\" : \"\",\n                                        \"block px-4 py-2 text-sm text-gray-700\"\n                                      )}\n                                    >\n                                      {item}\n                                    </a>\n                                  )}\n                                </Menu.Item>\n                              ))}\n                            </Menu.Items>\n                          </Transition>\n                        </>\n                      )}\n                    </Menu>\n                  </div>\n                </div> */}\n                <div className=\"-mr-2 flex md:hidden\">\n                  {/* Mobile menu button */}\n                  <Disclosure.Button className=\"bg-gray-800 inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-white hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white\">\n                    <span className=\"sr-only\">Open main menu</span>\n                    {open ? (\n                      <XIcon className=\"block h-6 w-6\" aria-hidden=\"true\" />\n                    ) : (\n                      <MenuIcon className=\"block h-6 w-6\" aria-hidden=\"true\" />\n                    )}\n                  </Disclosure.Button>\n                </div>\n              </div>\n            </div>\n\n            <Disclosure.Panel className=\"md:hidden\">\n              <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3\">\n                {navigation.map((item, itemIdx) =>\n                  itemIdx === 0 ? (\n                    <Fragment key={item}>\n                      {/* Current: \"bg-gray-900 text-white\", Default: \"text-gray-300 hover:bg-gray-700 hover:text-white\" */}\n                      <a\n                        href=\"#\"\n                        className=\"bg-gray-900 text-white block px-3 py-2 rounded-md text-base font-medium\"\n                      >\n                        {item}\n                      </a>\n                    </Fragment>\n                  ) : (\n                    <a\n                      key={item}\n                      href=\"#\"\n                      className=\"text-gray-300 hover:bg-gray-700 hover:text-white block px-3 py-2 rounded-md text-base font-medium\"\n                    >\n                      {item}\n                    </a>\n                  )\n                )}\n              </div>\n              {/* <div className=\"pt-4 pb-3 border-t border-gray-700\">\n                <div className=\"flex items-center px-5\">\n                  <div className=\"flex-shrink-0\">\n                    <img\n                      className=\"h-10 w-10 rounded-full\"\n                      src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\"\n                      alt=\"\"\n                    />\n                  </div>\n                  <div className=\"ml-3\">\n                    <div className=\"text-base font-medium leading-none text-white\">\n                      Tom Cook\n                    </div>\n                    <div className=\"text-sm font-medium leading-none text-gray-400\">\n                      tom@example.com\n                    </div>\n                  </div>\n                  <button className=\"ml-auto bg-gray-800 flex-shrink-0 p-1 rounded-full text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white\">\n                    <span className=\"sr-only\">View notifications</span>\n                    <BellIcon className=\"h-6 w-6\" aria-hidden=\"true\" />\n                  </button>\n                </div>\n                <div className=\"mt-3 px-2 space-y-1\">\n                  {profile.map((item) => (\n                    <a\n                      key={item}\n                      href=\"#\"\n                      className=\"block px-3 py-2 rounded-md text-base font-medium text-gray-400 hover:text-white hover:bg-gray-700\"\n                    >\n                      {item}\n                    </a>\n                  ))}\n                </div>\n              </div> */}\n            </Disclosure.Panel>\n          </>\n        )}\n      </Disclosure>\n\n      <header className=\"bg-white shadow hidden\">\n        <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Analyze</h1>\n        </div>\n      </header>\n      <main className=\"h-full\">\n        <div className=\"max-w-7xl mx-auto py-6 px-6 lg:px-8 h-full flex flex-col\">\n          <div className=\"px-0 pb-4\">\n            {\n              <Results\n                words={totals?.totalMorphemeCount || \"-\"}\n                characters={totals?.totalCharacterCount || \"-\"}\n                morea={totals?.totalMoraCount || \"-\"}\n                readability={jReadability?.readabilityScore || \"-\"}\n              />\n            }\n          </div>\n          <div className=\"flex-1 hpb-4 px-0\">\n            {\n              <AnalyzeForm\n                onTotalsResponse={(response) => {\n                  const spreadsheetValues = `${\n                    response?.totalCharacterCount || 0\n                  }\\t${response?.totalMorphemeCount || 0}\\t${\n                    response?.totalMoraCount || 0\n                  }`;\n\n                  copyToClipboard({ text: spreadsheetValues });\n\n                  setTotals(response);\n                }}\n                onJReadabilityResponse={(response) => setJReadability(response)}\n              />\n            }\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","import React from \"react\";\nimport HomePage from \"./components/HomePage/HomePage\";\n\nfunction App() {\n  return <HomePage />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}